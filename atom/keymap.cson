# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson


#############################################################################

'atom-text-editor.vim-mode-plus:not(.insert-mode)':
    ', l': 'settings:toggle-show-invisibles'

    ', c space': 'editor:toggle-line-comments'

    # There's no find-and-replace:hide
    ', space': 'find-and-replace:toggle'

    ', W': 'pane:split-down-and-copy-active-item'
    ', w': 'pane:split-right-and-copy-active-item'

    ', d': 'tree-view:toggle'
    ', t': 'fuzzy-finder:toggle-file-finder'

    'ctrl-k': 'window:focus-pane-above'
    'ctrl-j': 'window:focus-pane-below'
    'ctrl-h': 'window:focus-pane-on-left'
    'ctrl-l': 'window:focus-pane-on-right'

    # Using tabs-to-spaces package:
    # No support for setting number of spaces per tab.
    '\\ t': 'tabs-to-spaces:tabify'
    '\\ s': 'tabs-to-spaces:untabify'


'atom-text-editor.vim-mode-plus.normal-mode':
    ';': 'vim-mode-plus-ex-mode:open'

'atom-text-editor.vim-mode-plus.visual-mode':
    # Keep blocks selected when indenting/outdenting:
    '>': 'editor:indent-selected-rows'
    '<': 'editor:outdent-selected-rows'

'.platform-darwin':
    'cmd-t': 'application:new-file'
