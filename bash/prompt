# Setting the prompt.
# Chunks of this from
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt



##############################################################################
# RBENV
# Display the current version or nothing if we're using system ruby.

prompt_rbenv () {
  local s=""
  # Only do this if the rbenv command exists:
  if hash rbenv 2>/dev/null; then
    if [[ `rbenv version` =~ ^system.*$ ]]; then
      s+="";
    else
      s+="${1}$(rbenv version | sed -e 's/ .*//')"
    fi
  fi
  echo -e "${s}"
}


##############################################################################
# PYTHON
# Display the current version, if any.

prompt_python () {
  local s=""
  if which python > /dev/null 2>&1; then
    s+=${1}$(python --version 2>&1 | awk '{print $2}')"";
  fi
  echo -e "${s}"
}


##############################################################################
# NVM
# Display the current version of NVM's Node or nothing.

prompt_nvm () {
  local s=""
  # Only do this if the nvm command exists:
  if hash nvm 2>/dev/null; then
    if [ `nvm current` == "none" ] || [ `nvm current` == "system" ]; then
      s+="";
    else
      s+="${1}$(nvm current | sed -e 's/ .*//')"
    fi
  fi
  echo -e "${s}"
}


##############################################################################
# VIRTUALENV
# Replicating the default virtualenvwrapper prompt, because the RBENV stuff
# seemed to conflict with it.

prompt_virtualenv (){
  local s=''
  if [[ -n "$VIRTUAL_ENV" ]]; then
    s="${1}$(basename $VIRTUAL_ENV)";
  fi
  echo -e "${s}"
}

# disable the default virtualenv prompt change
export VIRTUAL_ENV_DISABLE_PROMPT=1


##############################################################################
# GIT

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${red}${s}";
	else
		return;
	fi;
}

##############################################################################
# COLORS

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	inverse=$(tput rev);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	inverse="\e[7m";
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

##############################################################################
# HIGHLIGHTING DIFFERENT PARTS

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${inverse}${red}";
else
	userStyle="${red}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${inverse}${orange}";
else
	hostStyle="${orange}";
fi;


##############################################################################
# PROMPT

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\[${bold}\]\n";									# newline
PS1+="\[${userStyle}\]\u";								# username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]\h";								# host
PS1+="\[${white}\] in ";
PS1+="\[${yellow}\]\w";									# working directory
PS1+="\$(prompt_python \"${white} p ${green}\")";		# Python version
PS1+="\$(prompt_virtualenv \"${white} ve ${green}\")";	# Virtualenv
PS1+="\$(prompt_rbenv \"${white} r ${cyan}\")";			# Ruby version
PS1+="\$(prompt_nvm \"${white} n ${blue}\")";			# Node version
PS1+="\$(prompt_git \"${white} on ${violet}\")";		# Git
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]";						# `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
